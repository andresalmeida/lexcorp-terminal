import React, { useState, useEffect } from 'react';

const ContactSection = () => {
  const [displayedText, setDisplayedText] = useState('');
  const [showCursor, setShowCursor] = useState(true);
  const [isComplete, setIsComplete] = useState(false);

  const contactData = {
    personal: {
      name: 'Andr√©s Almeida Jara',
      title: 'Full Stack Developer & Data Analyst',
      location: 'Quito, Ecuador',
      timezone: 'UTC-5',
      languages: ['Espa√±ol (Nativo)', 'Ingl√©s (Fluido)']
    },
    contact: {
      email: 'almeidaandres12@gmail.com',
      phone: '+593 99 054 5539',
      website: 'www.adaghost.me',
      linkedin: 'linkedin.com/in/andres-almeida-jara/',
      github: 'github.com/andresalmeida'
    },
    availability: {
      status: 'Disponible para nuevas oportunidades',
      type: 'Full-time / Freelance / Consultor√≠a',
      remote: 'Trabajo remoto preferido',
      relocation: 'Abierto a reubicaci√≥n'
    }
  };

  const generateContactOutput = () => {
    const lines = [
      '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê',
      '‚îÇ                     INFORMACI√ìN DE CONTACTO                 ‚îÇ',
      '‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§',
      ''
    ];

    lines.push('üë§ INFORMACI√ìN PERSONAL');
    lines.push('‚ïê'.repeat(50));
    lines.push(`  Nombre:        ${contactData.personal.name}`);
    lines.push(`  T√≠tulo:        ${contactData.personal.title}`);
    lines.push(`  Ubicaci√≥n:     ${contactData.personal.location} (${contactData.personal.timezone})`);
    lines.push(`  Idiomas:       ${contactData.personal.languages.join(', ')}`);
    lines.push('');

    lines.push('üìß CONTACTO PROFESIONAL');
    lines.push('‚ïê'.repeat(50));
    lines.push(`  üìß Email:      ${contactData.contact.email}`);
    lines.push(`  üì± Tel√©fono:   ${contactData.contact.phone}`);
    lines.push(`  üåê Website:    ${contactData.contact.website}`);
    lines.push(`  üíº LinkedIn:   ${contactData.contact.linkedin}`);
    lines.push(`  üêô GitHub:     ${contactData.contact.github}`);
    lines.push('');

    lines.push('üíº DISPONIBILIDAD');
    lines.push('‚ïê'.repeat(50));
    lines.push(`  üìä Estado:     ${contactData.availability.status}`);
    lines.push(`  üïê Modalidad:  ${contactData.availability.type}`);
    lines.push(`  üè† Remoto:     ${contactData.availability.remote}`);
    lines.push(`  ‚úàÔ∏è  Viajes:     ${contactData.availability.relocation}`);
    lines.push('');

    lines.push('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    lines.push('‚îÇ MEJOR FORMA DE CONTACTO                                     ‚îÇ');
    lines.push('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    lines.push('  üöÄ Para oportunidades laborales: LinkedIn o Email');
    lines.push('  üí° Para colaboraciones t√©cnicas: GitHub o Email');
    lines.push('  ü§ù Para networking: LinkedIn o Twitter');
    lines.push('  üìû Para emergencias: WhatsApp/Telegram');
    lines.push('');
    lines.push('  ‚è∞ Horario de respuesta: 24-48 horas h√°biles');
    lines.push('  üåç Zona horaria preferida para calls: UTC-5 (9AM-6PM)');
    lines.push('');
    lines.push('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    lines.push('');
    lines.push('üíå Mensaje: ¬°Siempre abierto a nuevas oportunidades y colaboraciones!');

    return lines.join('\n');
  };

  useEffect(() => {
    const fullText = generateContactOutput();
    let index = 0;

    const typeText = () => {
      if (index < fullText.length) {
        setDisplayedText(fullText.slice(0, index + 1));
        index++;
        setTimeout(typeText, Math.random() * 20 + 5);
      } else {
        setIsComplete(true);
        setShowCursor(false);
      }
    };

    typeText();

    // Cursor blinking effect
    const cursorInterval = setInterval(() => {
      setShowCursor(prev => !prev);
    }, 500);

    return () => clearInterval(cursorInterval);
  }, []);

  const copyToClipboard = (text, type) => {
    navigator.clipboard.writeText(text).then(() => {
      // Aqu√≠ podr√≠as mostrar una notificaci√≥n de √©xito
      console.log(`${type} copiado al portapapeles: ${text}`);
    });
  };

  return (
    <div className="font-mono text-sm">
      <div className="bg-terminal-bg border border-terminal-accent/30 rounded p-4">
        <div className="text-terminal-accent mb-4 flex items-center">
          <span className="animate-pulse mr-2">‚óè</span>
          CARGANDO INFORMACI√ìN DE CONTACTO...
        </div>
        
        <pre className="text-terminal-text/90 whitespace-pre-wrap font-mono leading-relaxed">
          {displayedText}
          {!isComplete && showCursor && (
            <span className="text-terminal-accent animate-pulse">‚ñà</span>
          )}
        </pre>

        {isComplete && (
          <div className="mt-6 space-y-4">
            {/* Quick Contact Buttons */}
            <div className="p-4 bg-terminal-accent/10 border border-terminal-accent/30 rounded">
              <div className="text-terminal-accent font-semibold mb-3">
                üöÄ CONTACTO R√ÅPIDO
              </div>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <button 
                  onClick={() => copyToClipboard(contactData.contact.email, 'Email')}
                  className="p-2 bg-terminal-accent/20 border border-terminal-accent/40 rounded hover:bg-terminal-accent/30 transition-colors text-left"
                >
                  üìß Copiar Email
                </button>
                <button 
                  onClick={() => window.open(`https://${contactData.contact.linkedin}`, '_blank')}
                  className="p-2 bg-terminal-accent/20 border border-terminal-accent/40 rounded hover:bg-terminal-accent/30 transition-colors text-left"
                >
                  üíº Abrir LinkedIn
                </button>
                <button 
                  onClick={() => window.open(`https://${contactData.contact.github}`, '_blank')}
                  className="p-2 bg-terminal-accent/20 border border-terminal-accent/40 rounded hover:bg-terminal-accent/30 transition-colors text-left"
                >
                  üêô Ver GitHub
                </button>
                <button 
                  onClick={() => copyToClipboard(contactData.contact.phone, 'Tel√©fono')}
                  className="p-2 bg-terminal-accent/20 border border-terminal-accent/40 rounded hover:bg-terminal-accent/30 transition-colors text-left"
                >
                  üì± Copiar Tel√©fono
                </button>
              </div>
            </div>

            {/* Status Indicator */}
            <div className="flex items-center justify-between p-3 bg-green-500/20 border border-green-500/40 rounded">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-green-400 font-semibold">Estado: DISPONIBLE</span>
              </div>
              <span className="text-green-300 text-sm">√öltima actualizaci√≥n: Hoy</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ContactSection; 